(() => {
    var e = {
            885: (e, t, r) => {
                e.exports = {
                    components: r(615).w,
                    dijkstra: r(83).dijkstra,
                    dijkstraAll: r(521).o,
                    findCycles: r(323).S,
                    floydWarshall: r(259).q,
                    isAcyclic: r(194).u,
                    postorder: r(761).B,
                    preorder: r(787).e,
                    prim: r(269).V,
                    tarjan: r(22).tarjan,
                    topsort: r(86).topsort,
                };
            },
            568: (e, t, r) => {
                e.exports = {
                    Graph: r(393).Graph,
                    json: { read: r(318).ij, write: r(318).cW },
                    alg: r(885),
                    version: r(809).i,
                };
            },
            615: (e, t) => {
                "use strict";
                (t.w = void 0),
                    (t.w = function (e) {
                        var t,
                            r = {},
                            s = [];
                        function i(s) {
                            r.hasOwnProperty(s) ||
                                ((r[s] = !0),
                                t.push(s),
                                e.successors(s).forEach(i),
                                e.predecessors(s).forEach(i));
                        }
                        return (
                            e.nodes().forEach(function (e) {
                                (t = []), i(e), t.length && s.push(t);
                            }),
                            s
                        );
                    });
            },
            917: (e, t) => {
                "use strict";
                function r(e, t, s, i, n, o) {
                    i.hasOwnProperty(t) ||
                        ((i[t] = !0),
                        s || o.push(t),
                        n(t).forEach(function (t) {
                            r(e, t, s, i, n, o);
                        }),
                        s && o.push(t));
                }
                Object.defineProperty(t, "__esModule", { value: !0 }),
                    (t.dfs = void 0),
                    (t.dfs = function (e, t, s) {
                        let i;
                        i = Array.isArray(t) ? t : [t];
                        var n = (
                                e.isDirected() ? e.successors : e.neighbors
                            ).bind(e),
                            o = [],
                            h = {};
                        return (
                            i.forEach(function (t) {
                                if (!e.hasNode(t))
                                    throw new Error(
                                        "Graph does not have node: " + t
                                    );
                                r(e, t, "post" === s, h, n, o);
                            }),
                            o
                        );
                    });
            },
            521: (e, t, r) => {
                "use strict";
                t.o = void 0;
                const s = r(83);
                t.o = function (e, t, r) {
                    return e.nodes().reduce(function (i, n) {
                        return (i[n] = (0, s.dijkstra)(e, n, t, r)), i;
                    }, {});
                };
            },
            83: (e, t, r) => {
                "use strict";
                Object.defineProperty(t, "__esModule", { value: !0 }),
                    (t.dijkstra = void 0);
                const s = r(67);
                var i = () => 1;
                t.dijkstra = function (
                    e,
                    t,
                    r = i,
                    n = function (t) {
                        return e.outEdges(t);
                    }
                ) {
                    return (function (e, t, r, i) {
                        var n,
                            o,
                            h = {},
                            a = new s.PriorityQueue(),
                            d = function (e) {
                                var t = e.v !== n ? e.v : e.w,
                                    s = h[t],
                                    i = r(e),
                                    d = o.distance + i;
                                if (i < 0)
                                    throw new Error(
                                        "dijkstra does not allow negative edge weights. Bad edge: " +
                                            e +
                                            " Weight: " +
                                            i
                                    );
                                d < s.distance &&
                                    ((s.distance = d),
                                    (s.predecessor = n),
                                    a.decrease(t, d));
                            };
                        for (
                            e.nodes().forEach(function (e) {
                                var r = e === t ? 0 : Number.POSITIVE_INFINITY;
                                (h[e] = { distance: r }), a.add(e, r);
                            });
                            a.size() > 0 &&
                            ((n = a.removeMin()),
                            (o = h[n]).distance !== Number.POSITIVE_INFINITY);

                        )
                            i(n).forEach(d);
                        return h;
                    })(e, String(t), r, n);
                };
            },
            323: (e, t, r) => {
                "use strict";
                t.S = void 0;
                const s = r(22);
                t.S = function (e) {
                    return (0, s.tarjan)(e).filter(function (t) {
                        return (
                            t.length > 1 ||
                            (1 === t.length && e.hasEdge(t[0], t[0]))
                        );
                    });
                };
            },
            259: (e, t) => {
                "use strict";
                t.q = void 0;
                var r = () => 1;
                t.q = function (
                    e,
                    t = r,
                    s = function (t) {
                        return e.outEdges(t);
                    }
                ) {
                    return (function (e, t, r) {
                        var s = {},
                            i = e.nodes();
                        return (
                            i.forEach(function (e) {
                                (s[e] = {}),
                                    (s[e][e] = { distance: 0 }),
                                    i.forEach(function (t) {
                                        e !== t &&
                                            (s[e][t] = {
                                                distance:
                                                    Number.POSITIVE_INFINITY,
                                            });
                                    }),
                                    r(e).forEach(function (r) {
                                        var i = r.v === e ? r.w : r.v,
                                            n = t(r);
                                        s[e][i] = {
                                            distance: n,
                                            predecessor: e,
                                        };
                                    });
                            }),
                            i.forEach(function (e) {
                                var t = s[e];
                                i.forEach(function (r) {
                                    var n = s[r];
                                    i.forEach(function (r) {
                                        var s = n[e],
                                            i = t[r],
                                            o = n[r],
                                            h = s.distance + i.distance;
                                        h < o.distance &&
                                            ((o.distance = h),
                                            (o.predecessor = i.predecessor));
                                    });
                                });
                            }),
                            s
                        );
                    })(e, t, s);
                };
            },
            194: (e, t, r) => {
                "use strict";
                t.u = void 0;
                const s = r(86);
                t.u = function (e) {
                    try {
                        (0, s.topsort)(e);
                    } catch (e) {
                        if (e instanceof s.topsort.CycleException) return !1;
                        throw e;
                    }
                    return !0;
                };
            },
            761: (e, t, r) => {
                "use strict";
                t.B = void 0;
                const s = r(917);
                t.B = function (e, t) {
                    return (0, s.dfs)(e, t, "post");
                };
            },
            787: (e, t, r) => {
                "use strict";
                t.e = void 0;
                const s = r(917);
                t.e = function (e, t) {
                    return (0, s.dfs)(e, t, "pre");
                };
            },
            269: (e, t, r) => {
                "use strict";
                t.V = void 0;
                const s = r(393),
                    i = r(67);
                t.V = function (e, t) {
                    var r,
                        n = new s.Graph(),
                        o = {},
                        h = new i.PriorityQueue();
                    function a(e) {
                        var s = e.v === r ? e.w : e.v,
                            i = h.priority(s);
                        if (void 0 !== i) {
                            var n = t(e);
                            n < i && ((o[s] = r), h.decrease(s, n));
                        }
                    }
                    if (0 === e.nodeCount()) return n;
                    e.nodes().forEach(function (e) {
                        h.add(e, Number.POSITIVE_INFINITY), n.setNode(e);
                    }),
                        h.decrease(e.nodes()[0], 0);
                    for (var d = !1; h.size() > 0; ) {
                        if (((r = h.removeMin()), o.hasOwnProperty(r)))
                            n.setEdge(r, o[r]);
                        else {
                            if (d)
                                throw new Error(
                                    "Input graph is not connected: " + e
                                );
                            d = !0;
                        }
                        e.nodeEdges(r).forEach(a);
                    }
                    return n;
                };
            },
            22: (e, t) => {
                "use strict";
                Object.defineProperty(t, "__esModule", { value: !0 }),
                    (t.tarjan = void 0),
                    (t.tarjan = function (e) {
                        var t = 0,
                            r = [],
                            s = {},
                            i = [];
                        function n(o) {
                            var h = (s[o] = {
                                onStack: !0,
                                lowlink: t,
                                index: t++,
                            });
                            if (
                                (r.push(o),
                                e.successors(o).forEach(function (e) {
                                    s.hasOwnProperty(e)
                                        ? s[e].onStack &&
                                          (h.lowlink = Math.min(
                                              h.lowlink,
                                              s[e].index
                                          ))
                                        : (n(e),
                                          (h.lowlink = Math.min(
                                              h.lowlink,
                                              s[e].lowlink
                                          )));
                                }),
                                h.lowlink === h.index)
                            ) {
                                var a,
                                    d = [];
                                do {
                                    (a = r.pop()),
                                        (s[a].onStack = !1),
                                        d.push(a);
                                } while (o !== a);
                                i.push(d);
                            }
                        }
                        return (
                            e.nodes().forEach(function (e) {
                                s.hasOwnProperty(e) || n(e);
                            }),
                            i
                        );
                    });
            },
            86: (e, t) => {
                "use strict";
                function r(e) {
                    var t = {},
                        r = {},
                        i = [];
                    if (
                        (e.sinks().forEach(function n(o) {
                            if (r.hasOwnProperty(o)) throw new s();
                            t.hasOwnProperty(o) ||
                                ((r[o] = !0),
                                (t[o] = !0),
                                e.predecessors(o).forEach(n),
                                delete r[o],
                                i.push(o));
                        }),
                        Object.keys(t).length !== e.nodeCount())
                    )
                        throw new s();
                    return i;
                }
                function s() {}
                Object.defineProperty(t, "__esModule", { value: !0 }),
                    (t.topsort = void 0),
                    (r.CycleException = s),
                    (t.topsort = r),
                    (s.prototype = new Error());
            },
            67: (e, t) => {
                "use strict";
                Object.defineProperty(t, "__esModule", { value: !0 }),
                    (t.PriorityQueue = void 0),
                    (t.PriorityQueue = class {
                        constructor() {
                            (this._arr = []), (this._keyIndices = {});
                        }
                        size() {
                            return this._arr.length;
                        }
                        keys() {
                            return this._arr.map(function (e) {
                                return e.key;
                            });
                        }
                        has(e) {
                            return this._keyIndices.hasOwnProperty(e);
                        }
                        priority(e) {
                            var t = this._keyIndices[e];
                            if (void 0 !== t) return this._arr[t].priority;
                        }
                        min() {
                            if (0 === this.size())
                                throw new Error("Queue underflow");
                            return this._arr[0].key;
                        }
                        add(e, t) {
                            var r = this._keyIndices;
                            if (((e = String(e)), !r.hasOwnProperty(e))) {
                                var s = this._arr,
                                    i = s.length;
                                return (
                                    (r[e] = i),
                                    s.push({ key: e, priority: t }),
                                    this._decrease(i),
                                    !0
                                );
                            }
                            return !1;
                        }
                        removeMin() {
                            this._swap(0, this._arr.length - 1);
                            var e = this._arr.pop();
                            return (
                                delete this._keyIndices[e.key],
                                this._heapify(0),
                                e.key
                            );
                        }
                        decrease(e, t) {
                            var r = this._keyIndices[e];
                            if (t > this._arr[r].priority)
                                throw new Error(
                                    "New priority is greater than current priority. Key: " +
                                        e +
                                        " Old: " +
                                        this._arr[r].priority +
                                        " New: " +
                                        t
                                );
                            (this._arr[r].priority = t), this._decrease(r);
                        }
                        _heapify(e) {
                            var t = this._arr,
                                r = 2 * e,
                                s = r + 1,
                                i = e;
                            r < t.length &&
                                ((i = t[r].priority < t[i].priority ? r : i),
                                s < t.length &&
                                    (i = t[s].priority < t[i].priority ? s : i),
                                i !== e &&
                                    (this._swap(e, i), this._heapify(i)));
                        }
                        _decrease(e) {
                            for (
                                var t, r = this._arr, s = r[e].priority;
                                0 !== e && !(r[(t = e >> 1)].priority < s);

                            )
                                this._swap(e, t), (e = t);
                        }
                        _swap(e, t) {
                            var r = this._arr,
                                s = this._keyIndices,
                                i = r[e],
                                n = r[t];
                            (r[e] = n),
                                (r[t] = i),
                                (s[n.key] = e),
                                (s[i.key] = t);
                        }
                    });
            },
            393: (e, t) => {
                "use strict";
                Object.defineProperty(t, "__esModule", { value: !0 }),
                    (t.Graph = void 0);
                var r = "\0";
                class s {
                    constructor(e = {}) {
                        (this._defaultNodeLabelFn = () => {}),
                            (this._defaultEdgeLabelFn = () => {}),
                            (this._nodes = {}),
                            (this._in = {}),
                            (this._preds = {}),
                            (this._out = {}),
                            (this._sucs = {}),
                            (this._edgeObjs = {}),
                            (this._edgeLabels = {}),
                            (this._nodeCount = 0),
                            (this._edgeCount = 0),
                            (this._isDirected =
                                !e.hasOwnProperty("directed") || e.directed),
                            (this._isMultigraph =
                                !!e.hasOwnProperty("multigraph") &&
                                e.multigraph),
                            (this._isCompound =
                                !!e.hasOwnProperty("compound") && e.compound),
                            this._isCompound &&
                                ((this._parent = {}),
                                (this._children = {}),
                                (this._children["\0"] = {}));
                    }
                    isDirected() {
                        return this._isDirected;
                    }
                    isMultigraph() {
                        return this._isMultigraph;
                    }
                    isCompound() {
                        return this._isCompound;
                    }
                    setGraph(e) {
                        return (this._label = e), this;
                    }
                    graph() {
                        return "object" == typeof this._label
                            ? Object.assign({}, this._label)
                            : this._label;
                    }
                    setDefaultNodeLabel(e) {
                        return (
                            (this._defaultNodeLabelFn = e),
                            "function" != typeof e &&
                                (this._defaultNodeLabelFn = () => e),
                            this
                        );
                    }
                    nodeCount() {
                        return this._nodeCount;
                    }
                    nodes() {
                        return Object.keys(this._nodes);
                    }
                    sources() {
                        var e = this;
                        return this.nodes().filter(function (t) {
                            return 0 === Object.keys(e._in[t]).length;
                        });
                    }
                    sinks() {
                        var e = this;
                        return this.nodes().filter(function (t) {
                            return 0 === Object.keys(e._out[t]).length;
                        });
                    }
                    setNodes(e, t) {
                        var r = arguments,
                            s = this;
                        return (
                            e.forEach(function (e) {
                                r.length > 1 ? s.setNode(e, t) : s.setNode(e);
                            }),
                            this
                        );
                    }
                    setNode(e, t) {
                        return this._nodes.hasOwnProperty(e)
                            ? (arguments.length > 1 && (this._nodes[e] = t),
                              this)
                            : ((this._nodes[e] =
                                  arguments.length > 1
                                      ? t
                                      : this._defaultNodeLabelFn(e)),
                              this._isCompound &&
                                  ((this._parent[e] = r),
                                  (this._children[e] = {}),
                                  (this._children["\0"][e] = !0)),
                              (this._in[e] = {}),
                              (this._preds[e] = {}),
                              (this._out[e] = {}),
                              (this._sucs[e] = {}),
                              ++this._nodeCount,
                              this);
                    }
                    node(e) {
                        return this._nodes[e];
                    }
                    hasNode(e) {
                        return this._nodes.hasOwnProperty(e);
                    }
                    removeNode(e) {
                        var t = this;
                        if (this._nodes.hasOwnProperty(e)) {
                            var r = function (e) {
                                t.removeEdge(t._edgeObjs[e]);
                            };
                            delete this._nodes[e],
                                this._isCompound &&
                                    (this._removeFromParentsChildList(e),
                                    delete this._parent[e],
                                    this.children(e).forEach(function (e) {
                                        t.setParent(e);
                                    }),
                                    delete this._children[e]),
                                Object.keys(this._in[e]).forEach(r),
                                delete this._in[e],
                                delete this._preds[e],
                                Object.keys(this._out[e]).forEach(r),
                                delete this._out[e],
                                delete this._sucs[e],
                                --this._nodeCount;
                        }
                        return this;
                    }
                    setParent(e, t) {
                        if (!this._isCompound)
                            throw new Error(
                                "Cannot set parent in a non-compound graph"
                            );
                        if (void 0 === t) t = r;
                        else {
                            for (
                                var s = (t += "");
                                void 0 !== s;
                                s = this.parent(s)
                            )
                                if (s === e)
                                    throw new Error(
                                        "Setting " +
                                            t +
                                            " as parent of " +
                                            e +
                                            " would create a cycle"
                                    );
                            this.setNode(t);
                        }
                        return (
                            this.setNode(e),
                            this._removeFromParentsChildList(e),
                            (this._parent[e] = t),
                            (this._children[t][e] = !0),
                            this
                        );
                    }
                    _removeFromParentsChildList(e) {
                        delete this._children[this._parent[e]][e];
                    }
                    parent(e) {
                        if (this._isCompound) {
                            var t = this._parent[e];
                            if (t !== r) return t;
                        }
                    }
                    children(e = "\0") {
                        if (this._isCompound) {
                            var t = this._children[e];
                            if (t) return Object.keys(t);
                        } else {
                            if (e === r) return this.nodes();
                            if (this.hasNode(e)) return [];
                        }
                    }
                    predecessors(e) {
                        var t = this._preds[e];
                        if (t) return Object.keys(t);
                    }
                    successors(e) {
                        var t = this._sucs[e];
                        if (t) return Object.keys(t);
                    }
                    neighbors(e) {
                        var t = this.predecessors(e);
                        if (t) {
                            const r = new Set(t);
                            for (const t of this.successors(e)) r.add(t);
                            return Array.from(r.values());
                        }
                    }
                    isLeaf(e) {
                        return (
                            0 ===
                            (this.isDirected()
                                ? this.successors(e)
                                : this.neighbors(e)
                            ).length
                        );
                    }
                    filterNodes(e) {
                        var t = new s({
                            directed: this._isDirected,
                            multigraph: this._isMultigraph,
                            compound: this._isCompound,
                        });
                        t.setGraph(this.graph());
                        var r = this;
                        Object.entries(this._nodes).forEach(function ([r, s]) {
                            e(r) && t.setNode(r, s);
                        }),
                            Object.values(this._edgeObjs).forEach(function (e) {
                                t.hasNode(e.v) &&
                                    t.hasNode(e.w) &&
                                    t.setEdge(e, r.edge(e));
                            });
                        var i = {};
                        function n(e) {
                            var s = r.parent(e);
                            return void 0 === s || t.hasNode(s)
                                ? ((i[e] = s), s)
                                : s in i
                                ? i[s]
                                : n(s);
                        }
                        return (
                            this._isCompound &&
                                t.nodes().forEach(function (e) {
                                    t.setParent(e, n(e));
                                }),
                            t
                        );
                    }
                    setDefaultEdgeLabel(e) {
                        return (
                            (this._defaultEdgeLabelFn = e),
                            "function" != typeof e &&
                                (this._defaultEdgeLabelFn = () => e),
                            this
                        );
                    }
                    edgeCount() {
                        return this._edgeCount;
                    }
                    edges() {
                        return Object.values(this._edgeObjs);
                    }
                    setPath(e, t) {
                        var r = this,
                            s = arguments;
                        return (
                            e.reduce(function (e, i) {
                                return (
                                    s.length > 1
                                        ? r.setEdge(e, i, t)
                                        : r.setEdge(e, i),
                                    i
                                );
                            }),
                            this
                        );
                    }
                    setEdge(e, t, r, s) {
                        var n,
                            h,
                            a,
                            d,
                            u = !1,
                            c = arguments[0];
                        "object" == typeof c && null !== c && "v" in c
                            ? ((n = c.v),
                              (h = c.w),
                              (a = c.name),
                              2 === arguments.length &&
                                  ((d = arguments[1]), (u = !0)))
                            : ((n = c),
                              (h = arguments[1]),
                              (a = arguments[3]),
                              arguments.length > 2 &&
                                  ((d = arguments[2]), (u = !0))),
                            (n = "" + n),
                            (h = "" + h),
                            void 0 !== a && (a = "" + a);
                        var f = o(this._isDirected, n, h, a);
                        if (this._edgeLabels.hasOwnProperty(f))
                            return u && (this._edgeLabels[f] = d), this;
                        if (void 0 !== a && !this._isMultigraph)
                            throw new Error(
                                "Cannot set a named edge when isMultigraph = false"
                            );
                        this.setNode(n),
                            this.setNode(h),
                            (this._edgeLabels[f] = u
                                ? d
                                : this._defaultEdgeLabelFn(n, h, a));
                        var p = (function (e, t, r, s) {
                            var i = "" + t,
                                n = "" + r;
                            if (!e && i > n) {
                                var o = i;
                                (i = n), (n = o);
                            }
                            var h = { v: i, w: n };
                            return s && (h.name = s), h;
                        })(this._isDirected, n, h, a);
                        return (
                            (n = p.v),
                            (h = p.w),
                            Object.freeze(p),
                            (this._edgeObjs[f] = p),
                            i(this._preds[h], n),
                            i(this._sucs[n], h),
                            (this._in[h][f] = p),
                            (this._out[n][f] = p),
                            this._edgeCount++,
                            this
                        );
                    }
                    edge(e, t, r) {
                        var s =
                            1 === arguments.length
                                ? h(this._isDirected, arguments[0])
                                : o(this._isDirected, e, t, r);
                        return this._edgeLabels[s];
                    }
                    hasEdge(e, t, r) {
                        var s =
                            1 === arguments.length
                                ? h(this._isDirected, arguments[0])
                                : o(this._isDirected, e, t, r);
                        return this._edgeLabels.hasOwnProperty(s);
                    }
                    removeEdge(e, t, r) {
                        var s =
                                1 === arguments.length
                                    ? h(this._isDirected, arguments[0])
                                    : o(this._isDirected, e, t, r),
                            i = this._edgeObjs[s];
                        if (i) {
                            const e = i.v,
                                t = i.w;
                            delete this._edgeLabels[s],
                                delete this._edgeObjs[s],
                                n(this._preds[t], e),
                                n(this._sucs[e], t),
                                delete this._in[t][s],
                                delete this._out[e][s],
                                this._edgeCount--;
                        }
                        return this;
                    }
                    inEdges(e, t) {
                        var r = this._in[e];
                        if (r) {
                            var s = Object.values(r);
                            return t
                                ? s.filter(function (e) {
                                      return e.v === t;
                                  })
                                : s;
                        }
                    }
                    outEdges(e, t) {
                        var r = this._out[e];
                        if (r) {
                            var s = Object.values(r);
                            return t
                                ? s.filter(function (e) {
                                      return e.w === t;
                                  })
                                : s;
                        }
                    }
                    nodeEdges(e, t) {
                        var r = this.inEdges(e, t);
                        if (r) return r.concat(this.outEdges(e, t));
                    }
                }
                function i(e, t) {
                    e[t] ? e[t]++ : (e[t] = 1);
                }
                function n(e, t) {
                    --e[t] || delete e[t];
                }
                function o(e, t, r, s) {
                    var i = "" + t,
                        n = "" + r;
                    if (!e && i > n) {
                        var o = i;
                        (i = n), (n = o);
                    }
                    return i + "" + n + "" + (void 0 === s ? "\0" : s);
                }
                function h(e, t) {
                    return o(e, t.v, t.w, t.name);
                }
                t.Graph = s;
            },
            318: (e, t, r) => {
                "use strict";
                t.ij = t.cW = void 0;
                const s = r(393);
                function i(e) {
                    return e.nodes().map(function (t) {
                        var r = e.node(t),
                            s = e.parent(t),
                            i = { v: t };
                        return (
                            void 0 !== r && (i.value = r),
                            void 0 !== s && (i.parent = s),
                            i
                        );
                    });
                }
                function n(e) {
                    return e.edges().map(function (t) {
                        var r = e.edge(t),
                            s = { v: t.v, w: t.w };
                        return (
                            void 0 !== t.name && (s.name = t.name),
                            void 0 !== r && (s.value = r),
                            s
                        );
                    });
                }
                (t.cW = function (e) {
                    var t = {
                        options: {
                            directed: e.isDirected(),
                            multigraph: e.isMultigraph(),
                            compound: e.isCompound(),
                        },
                        nodes: i(e),
                        edges: n(e),
                    };
                    return void 0 !== e.graph() && (t.value = e.graph()), t;
                }),
                    (t.ij = function (e) {
                        var t = new s.Graph(e.options).setGraph(e.value);
                        return (
                            e.nodes.forEach(function (e) {
                                t.setNode(e.v, e.value),
                                    e.parent && t.setParent(e.v, e.parent);
                            }),
                            e.edges.forEach(function (e) {
                                t.setEdge(
                                    { v: e.v, w: e.w, name: e.name },
                                    e.value
                                );
                            }),
                            t
                        );
                    });
            },
            809: (e, t) => {
                "use strict";
                (t.i = void 0), (t.i = "2.1.9-pre");
            },
        },
        t = {},
        r = (function r(s) {
            var i = t[s];
            if (void 0 !== i) return i.exports;
            var n = (t[s] = { exports: {} });
            return e[s](n, n.exports, r), n.exports;
        })(568);
    graphlib = r;
})();
